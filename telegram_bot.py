
import asyncio
import os
import glob
import time
import signal
from collections import Counter
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from utils.logger import logger
from utils.kafka_producer import send_kafka_job, stop_kafka_producer
from config.config import TELEGRAM_BOT_TOKEN, LOG_FOLDER, BASE_URLS, DATA_FOLDER, COMPLETED_FOLDER
from utils.story_analyzer import get_all_stories, get_health_stats, get_disk_usage

# --- Helper for sending long messages ---
async def send_in_chunks(update: Update, text: str, max_chars: int = 4000):
    """Sends a long message in chunks to avoid hitting Telegram's limit."""
    if not text:
        await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    for i in range(0, len(text), max_chars):
        chunk = text[i:i+max_chars]
        await update.message.reply_html(f"<pre>{chunk}</pre>")

# --- Command Handlers ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends a welcome message and lists available commands."""
    user = update.effective_user
    help_text = (
        f"üëã Ch√†o {user.first_name}, m√¨nh l√† Bot Crawler ƒë√¢y!\n\n"
        "D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh m√¨nh h·ªó tr·ª£:\n"
        "`/build` - Build v√† push image m·ªõi nh·∫•t l√™n Docker Hub.\n"
        "`/crawl <mode>` - B·∫Øt ƒë·∫ßu m·ªôt phi√™n crawl (v√≠ d·ª•: `/crawl all_sites`).\n"
        "`/status` - Ki·ªÉm tra tr·∫°ng th√°i c·ªßa h·ªá th·ªëng.\n"
        "`/crawl_story <URL>` - Crawl m·ªôt truy·ªán t·ª´ URL.\n"
        "`/crawl_site <site_key>` - Crawl to√†n b·ªô m·ªôt trang.\n"
        "`/check_missing` - Ch·∫°y t√°c v·ª• ki·ªÉm tra ch∆∞∆°ng c√≤n thi·∫øu.\n"
        "`/retry_failed <site_key>` - Th·ª≠ l·∫°i c√°c job ƒë√£ l·ªói.\n"
        "`/get_logs [s·ªë_d√≤ng]` - L·∫•y log m·ªõi nh·∫•t.\n"
        "`/list <scope> [--filter value]` - Li·ªát k√™ v√† l·ªçc truy·ªán.\n"
        "`/stats <scope>` - Xem c√°c th·ªëng k√™ chi ti·∫øt.\n"
        "`/help` - Hi·ªÉn th·ªã l·∫°i danh s√°ch l·ªánh n√†y.\n\n"
        "<b>V√≠ d·ª• l·ªánh /list:</b>\n"
        "  `/list completed --genre \'Ti√™n Hi·ªáp\'`\n"
        "<b>V√≠ d·ª• l·ªánh /stats:</b>\n"
        "  `/stats health`\n"
        "  `/stats top_genres 10`\n"
    )
    await update.message.reply_html(help_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Checks the status of the crawler system."""
    await update.message.reply_text("‚úÖ Bot is running and listening for commands.")

async def build_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Builds and pushes the Docker image to Docker Hub."""
    await update.message.reply_text("‚è≥ B·∫Øt ƒë·∫ßu qu√° tr√¨nh build v√† push image... Logs s·∫Ω ƒë∆∞·ª£c g·ª≠i ngay sau ƒë√¢y.")
    
    command = "docker compose build && docker compose push"
    
    try:
        process = await asyncio.create_subprocess_shell(
            command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.STDOUT  # Redirect stderr to stdout
        )

        output_chunk = ""
        last_sent_time = time.time()

        # Stream the output
        if process.stdout:
            while True:
                line = await process.stdout.readline()
                if not line:
                    break
                
                decoded_line = line.decode('utf-8', errors='ignore')
                output_chunk += decoded_line
                
                # Send in chunks of text or every 2 seconds
                if len(output_chunk) > 3500 or (time.time() - last_sent_time > 2 and output_chunk):
                    await update.message.reply_html(f"<pre>{output_chunk}</pre>")
                    output_chunk = ""
                    last_sent_time = time.time()

        # Send any remaining output
        if output_chunk:
            await update.message.reply_html(f"<pre>{output_chunk}</pre>")

        await process.wait()

        if process.returncode == 0:
            await update.message.reply_text("‚úÖ Build v√† push image th√†nh c√¥ng!")
        else:
            await update.message.reply_text(f"‚ùå Build v√† push image th·∫•t b·∫°i! (Exit code: {process.returncode})")

    except Exception as e:
        logger.error(f"[Bot] L·ªói khi th·ª±c thi l·ªánh build: {e}")
        await update.message.reply_text(f"‚ùå ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng khi ch·∫°y l·ªánh build: {e}")

async def crawl_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Triggers a global crawl job."""
    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng cung c·∫•p ch·∫ø ƒë·ªô crawl.\nV√≠ d·ª•: `/crawl all_sites` ho·∫∑c `/crawl missing_only`")
        return

    crawl_mode = args[0]
    job_type = ""
    
    # Determine job type based on crawl mode
    if crawl_mode in ["all_sites", "full", "genres_only"]:
        job_type = "all_sites"
    elif crawl_mode in ["missing_only", "missing"]:
        job_type = "missing_check"
    else:
        await update.message.reply_text(f"‚ùå Ch·∫ø ƒë·ªô crawl '{crawl_mode}' kh√¥ng h·ª£p l·ªá.")
        return

    job = {"type": job_type, "crawl_mode": crawl_mode}
    success = await send_kafka_job(job)
    if success:
        await update.message.reply_text(f"‚úÖ ƒê√£ ƒë∆∞a job `{job_type}` v·ªõi mode `{crawl_mode}` v√†o h√†ng ƒë·ª£i.")
    else:
        await update.message.reply_text("‚ùå G·ª≠i job v√†o Kafka th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs.")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lists and filters stories based on various criteria."""
    args = context.args
    if not args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p scope. V√≠ d·ª•: `/list completed`, `/list all`, `/list summary`")
        return

    await update.message.reply_text("ƒêang qu√©t v√† ph√¢n t√≠ch th∆∞ m·ª•c... vi·ªác n√†y c√≥ th·ªÉ m·∫•t v√†i gi√¢y.")

    scope = args[0].lower()
    filters = {
        'genre': None,
        'min_chapters': None,
        'max_chapters': None
    }

    try:
        for i in range(1, len(args), 2):
            if args[i].startswith('--'):
                key = args[i][2:]
                if key in filters and i + 1 < len(args):
                    if key.endswith('_chapters'):
                        filters[key] = int(args[i+1])
                    else:
                        filters[key] = args[i+1]
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå L·ªói c√∫ ph√°p filter. V√≠ d·ª•: `--min-chapters 100`")
        return

    stories = get_all_stories()

    if scope == 'summary':
        total_stories = len(stories)
        completed_stories = sum(1 for s in stories if s['status'] == 'completed')
        ongoing_stories = total_stories - completed_stories
        genres = set(s['genre'] for s in stories if s['genre'] != 'Unknown')
        summary_text = (
            f"<b>üìä Th·ªëng k√™ t·ªïng quan:</b>\n"
            f"- T·ªïng s·ªë truy·ªán: {total_stories}\n"
            f"- ƒê√£ ho√†n th√†nh: {completed_stories}\n"
            f"- ƒêang theo d√µi: {ongoing_stories}\n"
            f"- S·ªë l∆∞·ª£ng th·ªÉ lo·∫°i: {len(genres)}"
        )
        await update.message.reply_html(summary_text)
        return

    if scope == 'genres':
        genres = sorted(list(set(s['genre'] for s in stories if s['genre'] != 'Unknown')))
        genre_text = "<b>üìö Danh s√°ch c√°c th·ªÉ lo·∫°i:</b>\n\n" + "\n".join(f"- {g}" for g in genres)
        await send_in_chunks(update, genre_text)
        return

    if scope == 'completed':
        filtered_stories = [s for s in stories if s['status'] == 'completed']
    elif scope == 'all':
        filtered_stories = stories
    else:
        await update.message.reply_text(f"Scope kh√¥ng h·ª£p l·ªá: `{scope}`. D√πng `completed`, `all`, `summary`, ho·∫∑c `genres`.")
        return

    if filters['genre']:
        filtered_stories = [s for s in filtered_stories if s['genre'] and filters['genre'].lower() in s['genre'].lower()]
    if filters['min_chapters'] is not None:
        filtered_stories = [s for s in filtered_stories if s['total_chapters'] >= filters['min_chapters']]
    if filters['max_chapters'] is not None:
        filtered_stories = [s for s in filtered_stories if s['total_chapters'] <= filters['max_chapters']]

    if not filtered_stories:
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y truy·ªán n√†o kh·ªõp v·ªõi ti√™u ch√≠ c·ªßa b·∫°n.")
        return

    output_lines = [f"üîé T√¨m th·∫•y {len(filtered_stories)} truy·ªán:"]
    for story in filtered_stories:
        progress = f"{story['crawled_chapters']}/{story['total_chapters']}"
        line = f"- <b>{story['title']}</b> ({story['status']}) [{story['genre']}] - {progress}"
        output_lines.append(line)
    
    await send_in_chunks(update, "\n".join(output_lines))

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Provides detailed statistics about the crawler system."""
    args = context.args
    if not args:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p scope. V√≠ d·ª•: `/stats health`, `/stats disk_usage`")
        return

    scope = args[0].lower()
    await update.message.reply_text(f"ƒêang t√≠nh to√°n th·ªëng k√™ cho `{scope}`...")

    stories = get_all_stories()

    if scope == 'health':
        health_stats = get_health_stats(stories)
        skipped_stories = health_stats['skipped_stories']
        
        text = f"<b>‚ù§Ô∏è Th·ªëng k√™ s·ª©c kh·ªèe h·ªá th·ªëng:</b>\n"
        text += f"- S·ªë truy·ªán b·ªã skip: {len(skipped_stories)}\n"
        text += f"- T·ªïng s·ªë ch∆∞∆°ng l·ªói: {health_stats['total_dead_chapters']}\n"
        
        if skipped_stories:
            text += "\n<b>Truy·ªán b·ªã skip:</b>\n"
            for s in skipped_stories:
                text += f"- {s['title']} (L√Ω do: {s['skip_reason']})\n"
        
        if health_stats['stories_with_dead_chapters']:
            text += "\n<b>Truy·ªán c√≥ ch∆∞∆°ng l·ªói:</b>\n"
            for s in health_stats['stories_with_dead_chapters']:
                text += f"- {s['title']} ({s['dead_count']} ch∆∞∆°ng l·ªói)\n"
        await send_in_chunks(update, text)

    elif scope == 'disk_usage':
        total_size_bytes = get_disk_usage(DATA_FOLDER) + get_disk_usage(COMPLETED_FOLDER)
        total_size_gb = total_size_bytes / (1024**3)
        text = f"<b>üíæ Th·ªëng k√™ dung l∆∞·ª£ng:</b>\n"
        text += f"- T·ªïng dung l∆∞·ª£ng: {total_size_gb:.2f} GB"
        await update.message.reply_html(text)

    elif scope == 'top_genres':
        count = 5
        if len(args) > 1 and args[1].isdigit():
            count = int(args[1])
        genre_counts = Counter(s['genre'] for s in stories if s['genre'] != 'Unknown')
        top_genres = genre_counts.most_common(count)
        text = f"<b>üèÜ Top {len(top_genres)} th·ªÉ lo·∫°i c√≥ nhi·ªÅu truy·ªán nh·∫•t:</b>\n"
        for i, (genre, num) in enumerate(top_genres):
            text += f"{i+1}. {genre}: {num} truy·ªán\n"
        await update.message.reply_html(text)

    elif scope == 'longest_stories':
        count = 10
        if len(args) > 1 and args[1].isdigit():
            count = int(args[1])
        
        # Sort by total_chapters, descending
        longest = sorted(stories, key=lambda s: s.get('total_chapters', 0), reverse=True)
        top_longest = longest[:count]
        
        text = f"<b>üìñ Top {len(top_longest)} truy·ªán d√†i nh·∫•t:</b>\n"
        for i, s in enumerate(top_longest):
            text += f"{i+1}. {s['title']} - {s['total_chapters']} ch∆∞∆°ng\n"
        await send_in_chunks(update, text)

    else:
        await update.message.reply_text(f"Scope kh√¥ng h·ª£p l·ªá: `{scope}`. D√πng `health`, `disk_usage`, `top_genres`, `longest_stories`.")


async def crawl_story_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Triggers a crawl job for a single story URL."""
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng cung c·∫•p URL c·ªßa truy·ªán.\nV√≠ d·ª•: `/crawl_story https://xtruyen.vn/truyen/...`")
        return

    story_url = context.args[0]
    job = {"type": "single_story", "url": story_url}

    success = await send_kafka_job(job)
    if success:
        await update.message.reply_text(f"‚úÖ ƒê√£ ƒë∆∞a job `crawl_story` cho URL: {story_url} v√†o h√†ng ƒë·ª£i.")
    else:
        await update.message.reply_text("‚ùå G·ª≠i job v√†o Kafka th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs.")

async def crawl_site_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Triggers a crawl job for a full site."""
    if not context.args:
        await update.message.reply_text(f"‚ö†Ô∏è Vui l√≤ng cung c·∫•p site key.\nV√≠ d·ª•: `/crawl_site xtruyen`\nC√°c site ƒë∆∞·ª£c h·ªó tr·ª£: {', '.join(BASE_URLS.keys())}")
        return

    site_key = context.args[0]
    if site_key not in BASE_URLS:
        await update.message.reply_text(f"‚ùå Site key '{site_key}' kh√¥ng h·ª£p l·ªá.\nC√°c site ƒë∆∞·ª£c h·ªó tr·ª£: {', '.join(BASE_URLS.keys())}")
        return

    job = {"type": "full_site", "site_key": site_key}
    success = await send_kafka_job(job)
    if success:
        await update.message.reply_text(f"‚úÖ ƒê√£ ƒë∆∞a job `crawl_site` cho site: `{site_key}` v√†o h√†ng ƒë·ª£i.")
    else:
        await update.message.reply_text("‚ùå G·ª≠i job v√†o Kafka th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs.")

async def check_missing_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Triggers a job to check for missing chapters."""
    job = {"type": "missing_check"}
    success = await send_kafka_job(job)
    if success:
        await update.message.reply_text("‚úÖ ƒê√£ ƒë∆∞a job `check_missing` v√†o h√†ng ƒë·ª£i.")
    else:
        await update.message.reply_text("‚ùå G·ª≠i job v√†o Kafka th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs.")

async def retry_failed_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Triggers a job to retry failed genres/stories."""
    if not context.args:
        await update.message.reply_text(f"‚ö†Ô∏è Vui l√≤ng cung c·∫•p site key ƒë·ªÉ retry.\nV√≠ d·ª•: `/retry_failed xtruyen`")
        return

    site_key = context.args[0]
    job = {"type": "retry_failed_genres", "site_key": site_key}
    success = await send_kafka_job(job)
    if success:
        await update.message.reply_text(f"‚úÖ ƒê√£ ƒë∆∞a job `retry_failed` cho site `{site_key}` v√†o h√†ng ƒë·ª£i.")
    else:
        await update.message.reply_text("‚ùå G·ª≠i job v√†o Kafka th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs.")

async def get_logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Retrieves the last N lines of the latest log file."""
    try:
        num_lines = 50
        if context.args and context.args[0].isdigit():
            num_lines = int(context.args[0])

        log_files = glob.glob(os.path.join(LOG_FOLDER, '*.log'))
        if not log_files:
            await update.message.reply_text("Kh√¥ng t√¨m th·∫•y file log n√†o.")
            return

        latest_log_file = max(log_files, key=os.path.getctime)
        
        with open(latest_log_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            last_n_lines = lines[-num_lines:]

        log_content = "".join(last_n_lines)

        if not log_content:
            await update.message.reply_text(f"File log `{os.path.basename(latest_log_file)}` tr·ªëng.")
            return

        await send_in_chunks(update, log_content)

    except Exception as e:
        logger.error(f"[Bot] L·ªói khi ƒë·ªçc logs: {e}")
        await update.message.reply_text(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng ƒë·ªçc file log: {e}")

# --- Bot Setup ---

async def main_bot():
    """Starts the Telegram bot and registers command handlers."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("[Bot] TELEGRAM_BOT_TOKEN ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông.")
        return

    logger.info("[Bot] ƒêang kh·ªüi t·∫°o bot...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("build", build_command))
    application.add_handler(CommandHandler("crawl", crawl_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("crawl_story", crawl_story_command))
    application.add_handler(CommandHandler("crawl_site", crawl_site_command))
    application.add_handler(CommandHandler("check_missing", check_missing_command))
    application.add_handler(CommandHandler("retry_failed", retry_failed_command))
    application.add_handler(CommandHandler("get_logs", get_logs_command))

    logger.info("[Bot] Bot ƒëang ch·∫°y v√† l·∫Øng nghe l·ªánh...")

    stop_event = asyncio.Event()
    loop = asyncio.get_running_loop()

    def _handle_stop_signal() -> None:
        if not stop_event.is_set():
            stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(sig, _handle_stop_signal)
        except NotImplementedError:
            # Signal handlers may not be available on all platforms (e.g., Windows)
            pass

    try:
        async with application:
            await application.start()

            if application.updater:
                await application.updater.start_polling()
            else:
                logger.warning("[Bot] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông polling v√¨ kh√¥ng c√≥ updater. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh bot.")

            logger.info("[Bot] Bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng v√† ƒëang ch·∫°y.")

            await stop_event.wait()
    except asyncio.CancelledError:
        logger.info("[Bot] V√≤ng l·∫∑p bot ƒë√£ b·ªã h·ªßy. ƒêang ti·∫øn h√†nh t·∫Øt bot...")
    except (KeyboardInterrupt, SystemExit):
        logger.info("[Bot] Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu d·ª´ng, ƒëang t·∫Øt bot...")
    finally:
        if application.updater:
            await application.updater.stop()
        await stop_kafka_producer()
        logger.info("[Bot] Bot ƒë√£ d·ª´ng ho√†n to√†n.")


def run_bot() -> None:
    """Entry point for starting the Telegram bot."""
    try:
        asyncio.run(main_bot())
    except RuntimeError as exc:
        # Handle the "event loop is already running" scenario gracefully.
        if "event loop is already running" in str(exc):
            logger.error("[Bot] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông bot v√¨ v√≤ng l·∫∑p asyncio ƒë√£ ch·∫°y s·∫µn."
                         " H√£y ƒë·∫£m b·∫£o bot ƒë∆∞·ª£c kh·ªüi ch·∫°y nh∆∞ m·ªôt ti·∫øn tr√¨nh ri√™ng bi·ªát.")
        else:
            raise


if __name__ == "__main__":
    run_bot()
